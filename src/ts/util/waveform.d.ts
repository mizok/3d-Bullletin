import { EventEmitter } from "./event-emitter";
interface WaveformOptions {
    container?: HTMLElement;
    canvas?: HTMLCanvasElement;
    trackLength?: number;
    data?: number[];
    outerColor?: string;
    reflection?: number;
    interpolate?: boolean;
    bindResize?: boolean;
    fadeOpacity?: number;
    width?: number;
    height?: number;
    gutterWidth?: number;
    waveWidth?: number;
}
export declare const DEFAULT_MAX_OPACITY = 1;
export declare const DEFAULT_MIN_OPACITY = 0.2;
export declare const WAVE_FOCUS = "waveFocus";
export declare const WAVE = "wave";
export declare const WAVE_ACTIVE = "waveActive";
export declare const WAVE_SELECTED = "waveSelected";
export declare const GUTTER = "gutter";
export declare const GUTTER_ACTIVE = "gutterActive";
export declare const GUTTER_SELECTED = "gutterSelected";
export declare const REFLECTION = "reflection";
export declare const REFLECTION_ACTIVE = "reflectionActive";
export declare const EVENT_READY = "ready";
export declare const EVENT_CLICK = "click";
export declare const EVENT_HOVER = "hover";
export declare const EVENT_RESIZED = "hover";
export declare class Waveform extends EventEmitter {
    readonly DEFAULT_MAX_OPACITY = 1;
    readonly DEFAULT_MIN_OPACITY = 0.2;
    readonly WAVE_FOCUS = "waveFocus";
    readonly WAVE = "wave";
    readonly WAVE_ACTIVE = "waveActive";
    readonly WAVE_SELECTED = "waveSelected";
    readonly GUTTER = "gutter";
    readonly GUTTER_ACTIVE = "gutterActive";
    readonly GUTTER_SELECTED = "gutterSelected";
    readonly REFLECTION = "reflection";
    readonly REFLECTION_ACTIVE = "reflectionActive";
    readonly EVENT_READY = "ready";
    readonly EVENT_CLICK = "click";
    readonly EVENT_HOVER = "hover";
    readonly EVENT_RESIZED = "hover";
    private container;
    private canvas;
    private data;
    private outerColor;
    private reflection;
    private interpolate;
    private bindResize;
    private fadeOpacity;
    private wavesCollection;
    private context;
    private width;
    private height;
    private waveWidth;
    private gutterWidth;
    private waveOffset;
    private reflectionHeight;
    private waveHeight;
    private colors;
    private active;
    private clickPercent;
    private selected;
    private isPlaying;
    private hasStartedPlaying;
    private trackLength;
    constructor(options: WaveformOptions);
    private spawnCanvas;
    private initialize;
    private updateHeight;
    private setColors;
    private setColor;
    private setGradient;
    private getMouseClickPosition;
    private fireEvent;
    private bindEventHandlers;
    private onMouseOut;
    private onMouseOver;
    private onMouseDown;
    private bindContainerResize;
    private setPlaying;
    private setPaused;
    isPaused(): boolean;
    play(perct: number): void;
    pause(): void;
    playProgress(perct: number): void;
    private calcPercent;
    private getWaveClicked;
    private getMousePosTrackTime;
    private redraw;
    private render;
    private clear;
    private setData;
    private getData;
    private setDataInterpolated;
    private setDataCropped;
    private linearInterpolate;
    private expandArray;
    private interpolateArray;
    private putDataIntoWaveBlock;
    private cache;
    private update;
}
export {};
